// Script ƒë·ªïi m·∫≠t kh·∫©u admin ƒë∆°n gi·∫£n v·ªõi tham s·ªë d√≤ng l·ªánh
import { createClient } from '@supabase/supabase-js';

// Supabase configuration
const supabaseUrl = 'https://api.dinamondbet68.com/';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// H√†m validate m·∫≠t kh·∫©u ƒë∆°n gi·∫£n
function validatePassword(password) {
  if (!password || password.length < 6) {
    return {
      isValid: false,
      error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
    };
  }
  return { isValid: true };
}

// H√†m t√¨m admin user
async function findAdminUser() {
  console.log('üîç ƒêang t√¨m admin user...');
  
  try {
    // T√¨m user c√≥ role admin
    const { data: adminRoles, error: roleError } = await supabase
      .from('user_roles')
      .select('user_id')
      .eq('role', 'admin');
    
    if (roleError) {
      console.error('‚ùå L·ªói khi t√¨m admin roles:', roleError);
      return null;
    }
    
    if (!adminRoles || adminRoles.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y admin user');
      return null;
    }
    
    // L·∫•y th√¥ng tin user ƒë·∫ßu ti√™n c√≥ role admin
    const adminUserId = adminRoles[0].user_id;
    
    const { data: adminUser, error: userError } = await supabase.auth.admin.getUserById(adminUserId);
    
    if (userError) {
      console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin admin user:', userError);
      return null;
    }
    
    if (!adminUser.user) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin admin user');
      return null;
    }
    
    console.log('‚úÖ T√¨m th·∫•y admin user:', adminUser.user.email);
    return adminUser.user;
    
  } catch (error) {
    console.error('‚ùå L·ªói khi t√¨m admin user:', error);
    return null;
  }
}

// H√†m ƒë·ªïi m·∫≠t kh·∫©u admin
async function changeAdminPassword(newPassword) {
  console.log('üîÑ ƒêang ƒë·ªïi m·∫≠t kh·∫©u admin...');
  
  try {
    // Validate m·∫≠t kh·∫©u
    const validation = validatePassword(newPassword);
    if (!validation.isValid) {
      console.error('‚ùå', validation.error);
      return false;
    }
    
    // T√¨m admin user
    const adminUser = await findAdminUser();
    
    if (!adminUser) {
      console.log('‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y admin user');
      return false;
    }
    
    // ƒê·ªïi m·∫≠t kh·∫©u b·∫±ng Admin API
    const { data, error } = await supabase.auth.admin.updateUserById(
      adminUser.id,
      { password: newPassword }
    );
    
    if (error) {
      console.error('‚ùå L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u:', error);
      return false;
    }
    
    console.log('‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!');
    console.log('üìß Email admin:', adminUser.email);
    console.log('üÜî User ID:', adminUser.id);
    return true;
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u:', error);
    return false;
  }
}

// H√†m ch√≠nh
async function main() {
  const newPassword = process.argv[2];
  
  if (!newPassword) {
    console.log('üîê Script ƒê·ªïi M·∫≠t Kh·∫©u Admin');
    console.log('================================');
    console.log('C√°ch s·ª≠ d·ª•ng:');
    console.log('  node change-admin-password-simple.js <m·∫≠t_kh·∫©u_m·ªõi>');
    console.log('');
    console.log('V√≠ d·ª•:');
    console.log('  node change-admin-password-simple.js Admin123!');
    console.log('');
    console.log('L∆∞u √Ω: M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
    return;
  }
  
  console.log('üîê ƒê·ªïi M·∫≠t Kh·∫©u Admin');
  console.log('======================');
  
  const success = await changeAdminPassword(newPassword);
  
  if (success) {
    console.log('\nüéâ Ho√†n th√†nh! M·∫≠t kh·∫©u admin ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh c√¥ng.');
    console.log('üìù L∆∞u √Ω: Vui l√≤ng l∆∞u m·∫≠t kh·∫©u m·ªõi v√†o n∆°i an to√†n.');
  } else {
    console.log('\n‚ùå Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.');
    process.exit(1);
  }
}

// Ch·∫°y script
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { changeAdminPassword, findAdminUser, validatePassword }; 